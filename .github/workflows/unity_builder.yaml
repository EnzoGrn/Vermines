name: Check if Unity Project build correctlyüî®

# OMGG Github Action for Vermines project
# It's a workflow that check the Unity license validity, and build the project.
# The result of the build can be found in the artifacts of the workflow.

on:
  # Work only when we push on the main branch
  push:
    branches:
      - main
      - experimental/*
  workflow_dispatch:

env:
  # -- Secrets --
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} # The license of Unity, care the expiration date.
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

  # -- Variables --

  # ! The expiration date is 2025-09-23 so when it's expired, the build will fail, and it will need an update of license.
  # NOTE: When the UNITY_LICENSE will be update, please add the new expiration date here.
  stopDate: '2025-09-23T16:18:03'

  # Path of the project in the repository.
  projectPath: 'Vermines'

  # The version of Unity to use.
  # Note: We currently use 2022.3.44f1 for dev the project, but their is no docker image for this version.
  #       So, we use the latest version that have a docker image.
  unityVersion: '6000.0.25f1'

  # ! If the version of Unity change, know that the docker image may need an update.
  # You can found other version: https://hub.docker.com/r/unityci/editor/tags
  dockerImage: 'unityci/editor:windows-6000.0.25f1-windows-il2cpp-3.1.0'

jobs:
  checkLicense:
    name: Check for the Unity licenseüìù
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
      - name: Check license expiration
        run: |
          currentDate=$(date -u +"%Y-%m-%dT%H:%M:%S")
          if [[ "$currentDate" > "${{ env.stopDate }}" ]]; then
            echo "License expired"
            exit 1
          fi
  build:
    name: Build Unity Projectüî®
    runs-on: windows-latest
    needs: checkLicense
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # The target platform to build the project for.
          # Need to add more platform if the project need to be built for more platform.
          # Example : StandaloneOSX, StandaloneLinux64, WebGL, iOS, Android, etc...
          - StandaloneWindows64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Cache Unity
        uses: actions/cache@v4
        with:
          path: ${{ env.projectPath }}/Library
          key: Library-${{ env.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.projectPath }}-
            Library-
      - name: Build project
        # This step can failed if the Library folder is exacly the same as the cache.
        # It will say:
        # - Error: Branch is dirty. Refusing to base semantic version on uncommitted changes
        uses: game-ci/unity-builder@v4.2.3
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.projectPath }}
          unityVersion: ${{ env.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.projectPath }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  testRunner:
    needs:
      - checkLicense
      - build
    strategy:
      matrix:
        targetPlatform:
          # The target platform to build the project for.
          # Need to add more platform if the project need to be built for more platform.
          # Example : StandaloneOSX, StandaloneLinux64, WebGL, iOS, Android, etc...
          - StandaloneWindows64
    name: Test all modes üß™
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create LFS file list
        run: git lfs ls-files | cut -d ' ' -f1 | sort > .lfs-asset-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-asset-id') }}
      - name: Git LFS pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore library cache
        uses: actions/cache@v2
        with:
          path: ${{ env.projectPath }}/Library
          key: Library-${{ env.projectPath }}-{{ $matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.projectPath }}-
            Library-
      - name: Run Test
        id: tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ env.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ env.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customImage: ${{ env.dockerImage }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOption: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.targetPlatform }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      - name: Code Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage results for ${{ matrix.targetPlatform }}
          path: ${{ steps.tests.outputs.coveragePath }}

  release:
    needs:
      - build
      - testRunner
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform:
          # The target platform to build the project for.
          # Need to add more platform if the project need to be built for more platform.
          # Example : StandaloneOSX, StandaloneLinux64, WebGL, iOS, Android, etc...
          - StandaloneWindows64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get last commit message
        id: get_commit_message
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "LAST_COMMIT_MESSAGE=${LAST_COMMIT_MESSAGE//$'\n'/\\n}" >> $GITHUB_ENV
      - name: Extract version from commit message
        id: version
        run: |
          TAG=$(echo "${{ env.LAST_COMMIT_MESSAGE }}" | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z]+)?')
          echo "Extracted TAG: $TAG"
          if [ -z "$TAG" ]; then
            echo "No valid tag found in the commit message."
            exit 1
          fi
          TAG="v$TAG"  # Ajoute le pr√©fixe 'v'
          echo "TAG=$TAG" | tee -a $GITHUB_ENV

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: build
      - name: List files in build directory # Debug for showing all the files that contains the Unity build.
        run: ls -R build
        shell: pwsh
      - name: Create a ZIP of the build folder
        run: |
          zip -r build/Release.zip build/Build-${{ matrix.targetPlatform }}/*
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          body: 'Auto-generated release'
          files: |
            build/Release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Check if Unity Project build correctlyüî®

# OMGG Github Action for Vermines project
# It's a workflow that check the Unity license validity, and build the project.
# The result of the build can be found in the artifacts of the workflow.

on:
  # Work only on pull request with any branches
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  # -- Secrets --
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} # The license of Unity, care the expiration date.
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

  # -- Variables --

  # ! The expiration date is 2025-09-23 so when it's expired, the build will fail, and it will need an update of license.
  # NOTE: When the UNITY_LICENSE will be update, please add the new expiration date here.
  stopDate: '2025-09-23T16:18:03'

  # Path of the project in the repository.
  projectPath: 'Vermines'

  # The version of Unity to use.
  # Note: We currently use 2022.3.44f1 for dev the project, but their is no docker image for this version.
  #       So, we use the latest version that have a docker image.
  unityVersion: '2022.3.42f1'

  # ! If the version of Unity change, know that the docker image may need an update.
  # You can found other version: https://hub.docker.com/r/unityci/editor/tags
  dockerImage: 'unityci/editor:windows-2022.3.42f1-windows-il2cpp-3.1.0'

jobs:
  checkLicense:
    name: Check for the Unity licenseüìù
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
      - name: Check license expiration
        run: |
          currentDate=$(date -u +"%Y-%m-%dT%H:%M:%S")
          if [[ "$currentDate" > "${{ env.stopDate }}" ]]; then
            echo "License expired"
            exit 1
          fi
  build:
    name: Build Unity Projectüî®
    runs-on: windows-latest
    needs: checkLicense
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # The target platform to build the project for.
          # Need to add more platform if the project need to be built for more platform.
          # Example : StandaloneOSX, StandaloneLinux64, WebGL, iOS, Android, etc...
          - StandaloneWindows64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Unity
        uses: actions/cache@v4
        with:
          path: ${{ env.projectPath }}/Library
          key: Library-${{ env.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.projectPath }}-
            Library-
      - name: Build project
        uses: game-ci/unity-builder@v4.2.3
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.projectPath }}
          unityVersion: ${{ env.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.projectPath }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
  testRunner:
    needs:
      - checkLicense
      - build
    strategy:
      matrix:
        targetPlatform:
          # The target platform to build the project for.
          # Need to add more platform if the project need to be built for more platform.
          # Example : StandaloneOSX, StandaloneLinux64, WebGL, iOS, Android, etc...
          - StandaloneWindows64
    name: Test all modes üß™
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create LFS file list
        run: git lfs ls-files | cut -d ' ' -f1 | sort > .lfs-asset-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-asset-id') }}
      - name: Git LFS pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore library cache
        uses: actions/cache@v2
        with:
          path: ${{ env.projectPath }}/Library
          key: Library-${{ env.projectPath }}-{{ $matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.projectPath }}-
            Library-
      - name: Run Test
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ env.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ env.UNITY_PASSWORD }}
        with:
          projectPath: ${{ env.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customImage: ${{ env.dockerImage }}

name: Link Issues Across Repositories

on:
  workflow_dispatch:
  issues:
    types: [opened, edited, closed, reopened]

jobs:
  link_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Display the GitHub event payload
        run: |
          cat "$GITHUB_EVENT_PATH"
      
      - name: Debug API Request
        run: |
          response=$(curl -s -o response.json -w "%{http_code}" -H "Authorization: token ${{ secrets.PAT }}" "https://api.github.com/repos/${{ github.repository }}/issues/")
          echo "HTTP Response Code: $response"
          cat response.json

      - name: Extract issue details
        id: extract
        run: |
          issue_number=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          to_repo="EpitechPromo2026/G-EIP-700-REN-7-1-eip-enzo.garnier"
          from_repo="${{ github.repository }}"
          issue_title=$(jq -r '.issue.title' "$GITHUB_EVENT_PATH")
          issue_body=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")

          # Vérifier si les valeurs sont vides
          if [ -z "$issue_number" ] || [ -z "$issue_title" ]; then
            echo "Erreur : numéro d'issue ou titre manquant."
            exit 1
          fi

          # Si le corps est vide ou que son contenu est égal à "null", le remplir avec un message par défaut
          if [ -z "$issue_body" ] || [ "$issue_body" == "null" ]; then
            issue_body="Issue created by ${{ github.actor }}."
          fi

          # Lire le mapping des issues seulement si le fichier existe
          if [ -f .github/issue_mapping.json ]; then
            mapping=$(cat .github/issue_mapping.json | jq -r --arg issue_number "$issue_number" '.[$issue_number]')
          else
            mapping=$issue_number
          fi
          echo "mapped_issue_number=$mapping" >> $GITHUB_ENV  # Stocker le numéro mappé

          echo "title=$issue_title" >> $GITHUB_ENV
          echo "body=$issue_body" >> $GITHUB_ENV
          echo "number=$issue_number" >> $GITHUB_ENV
          echo "to_repo=$to_repo" >> $GITHUB_ENV
          echo "from_repo=$from_repo" >> $GITHUB_ENV

      - name: Debug Variables
        run: |
          echo "Title: ${{ env.title }}"
          echo "Body: ${{ env.body }}"
          echo "Number: ${{ env.number }}"
          echo "Mapped Issue Number: ${{ env.mapped_issue_number }}"

      # Ajouter cette étape après l'extraction des détails de l'issue
      - name: Check issue state (closed or reopened)
        id: check_state
        run: |
          issue_state=$(jq -r '.issue.state' "$GITHUB_EVENT_PATH")
          echo "state=$issue_state" >> $GITHUB_ENV

      # Fermer l'issue dans le repo distant si l'issue est fermée
      - name: Close issue in remote repo
        if: env.state == 'closed'
        run: |
          issue_number=${{ env.mapped_issue_number }}
          echo "{\"state\": \"closed\"}" > /tmp/close_issue_data.json

          curl -X PATCH \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Content-Type: application/json" \
            -d @/tmp/close_issue_data.json \
            https://api.github.com/repos/${{ env.to_repo }}/issues/${issue_number}

      - name: Check if issue already exists
        if: env.state != 'closed'
        id: check_issue
        run: |
          existing_issues=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
          "https://api.github.com/repos/${{ env.to_repo }}/issues?state=all&filter=all")

          if echo "$existing_issues" | grep -q '"message":'; then
            echo "Erreur lors de la récupération des issues : $existing_issues"
            exit 1
          fi

          issue_data=$(echo "$existing_issues" | jq --arg title "${{ env.title }}" \
          'map(select(.title == $title)) | .[0]')

          issue_number=$(echo "$issue_data" | jq -r '.number')
          issue_state=$(echo "$issue_data" | jq -r '.state')

          if [ "$issue_number" != "null" ]; then
            echo "L'issue existe déjà avec le numéro $issue_number et son état est $issue_state."
            echo "issue_number=$issue_number" >> $GITHUB_ENV
            echo "issue_state=$issue_state" >> $GITHUB_ENV
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "L'issue n'existe pas."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Reopen issue if closed
        if: env.exists == 'true' && env.issue_state == 'closed'
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Content-Type: application/json" \
            -d "{\"state\": \"open\"}" \
            "https://api.github.com/repos/${{ env.to_repo }}/issues/${{ env.issue_number }}"
          echo "Issue #${{ env.issue_number }} rouverte avec succès."

      - name: Create issue if not exists
        if: env.exists == 'false'
        run: |
          echo "{\"title\": \"${{ env.title }}\", \"body\": \"${{ env.body }} \n\n Linked to: ${{ env.from_repo }}#${{ env.number }}\"}" > /tmp/issue_data.json

          # Utiliser ce fichier pour la requête curl
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Content-Type: application/json" \
            -d @/tmp/issue_data.json \
            https://api.github.com/repos/${{ env.to_repo }}/issues
          echo "Nouvelle issue créée."

      - name: Continue with workflow
        run: echo "Gestion des issues terminée."